DROP TABLE IF EXISTS "billing".payout_status_hist;
DROP SEQUENCE IF EXISTS "billing".payout_status_hist_id_seq;

DROP TABLE IF EXISTS "billing".payout;
DROP SEQUENCE IF EXISTS "billing".payout_id_seq;

CREATE SEQUENCE "billing".payout_id_seq INCREMENT 1 MINVALUE 1 START 1 CACHE 1;

CREATE TABLE "billing".payout
(
  "id"                              integer                 NOT NULL   DEFAULT nextval('billing.payout_id_seq'::regclass),
  "key"                             uuid                    NOT NULL,
  -- Reference to the platform user
  "provider"                        integer                 NOT NULL,
  -- Payment provider PayOut id
  "provider_payout"                 character varying(64),
  -- Funds transferred from the seller's wallet to her bank account
  "debited_funds"                   numeric(20,6)           NOT NULL,
  -- Fees collected
  "platform_fees"                   numeric(20,6)           NOT NULL,
  -- Payment currency. Currently only EUR is supported
  "currency"                        character varying(3)    NOT NULL,
  "status"                          character varying(64)   NOT NULL,
  "status_updated_on"               timestamp               NOT NULL,
  "created_on"                      timestamp,
  "executed_on"                     timestamp,
  "bankwire_ref"                    character varying (12)  NOT NULL,
  -- External payment provider (MANGOPAY) API result
  "result_code"                     character varying,
  "result_message"                  character varying,
  -- Refund generated by MANGOPAY
  "provider_refund"                 character varying(64),
  "provider_refund_created_on"      timestamp,
  "provider_refund_executed_on"     timestamp,
  "provider_refund_status"          character varying,
  "provider_refund_reason_type"     character varying,
  "provider_refund_reason_message"  character varying,
  -- Workflow
  "process_definition"              character varying,
  "process_instance"                character varying,
  CONSTRAINT pk_payout PRIMARY KEY (id),
  CONSTRAINT uq_payout_key UNIQUE ("key"),
  CONSTRAINT uq_payout_bankwire_ref UNIQUE ("bankwire_ref"),
  CONSTRAINT fk_payout_provider FOREIGN KEY ("provider")
      REFERENCES web.account (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE SET NULL,
  CONSTRAINT chk_payout_status_enum CHECK
      ("status" IN ('NotSpecified', 'CREATED', 'FAILED', 'SUCCEEDED'))
);

CREATE SEQUENCE "billing".payout_status_hist_id_seq INCREMENT 1 MINVALUE 1 START 1 CACHE 1;

CREATE TABLE "billing".payout_status_hist
(
  "id"                    integer                 NOT NULL   DEFAULT nextval('billing.payout_status_hist_id_seq'::regclass),
  "payout"                integer                 NOT NULL,
  "status"                character varying(64)   NOT NULL,
  "status_updated_on"     timestamp               NOT NULL,
  CONSTRAINT pk_payout_status_hist PRIMARY KEY (id),
  CONSTRAINT fk_payout_status_hist_payout FOREIGN KEY ("payout")
      REFERENCES "billing".payout (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT chk_payout_status_hist_status_enum CHECK
      ("status" IN ('NotSpecified', 'CREATED', 'FAILED', 'SUCCEEDED'))
);
